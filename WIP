install.packages("tm", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("NLP", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("slam", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("SnowballC", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("tau", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("ngram", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("data.table", lib="C:/TFS/Rlib/",dependencies=TRUE)
install.packages("C:/TFS/R Development/Capstone/slam_0.1-37.tar.gz", repos = NULL, type = "source", lib="C:/TFS/Rlib/")

library(data.table,  lib.loc="C:/TFS/Rlib/")
library(ngram,  lib.loc="C:/TFS/Rlib/")
library(reshape,  lib.loc="C:/TFS/Rlib/")


#######################################

splitter<-function(x) {
  dfr = data.frame(strsplit(x, "\\."), stringsAsFactors = F)
  colnames(dfr) = "zin"
  zinnen = cbind(words = apply(dfr, 1, wordcount), dfr)
  return(zinnen)
  }

#nu met loop
#alles met minimaal 3 woorden
create_ngram_table = function(n, zinnen) {
  r = 1
  #use n words sentences only
  nwords = data.frame(zinnen[zinnen$words>n-1,2], stringsAsFactors = F)
  #create result data frame
  df <- data.frame(w1 = character(1000),w2 = character(1000),w3 = character(1000),w4 = character(1000),w5 = character(1000), stringsAsFactors = FALSE)
  #loop trough sentences
  for (z in 1:length(nwords[,1])) { #for each sentence
    #get ngrams for sentence
    pt = data.frame(get.phrasetable(ngram(nwords[z,], n=n, sep=" ")),stringsAsFactors = F)
    #split in columns
    y = data.frame(transform(pt, pt = colsplit(ngrams, split = " ", names = rep('w', n))), stringsAsFactors = F)
    #convert new columns to character
    for (a in 1:n) {
      y[,a+3] = as.character(y[,a+3])  
    }
    
    #add each ngram to result data frame
    for (i in 1:length(y[,1])) {
      k = n+3
      df[r,1:n] <- y[i,4:k]
      r <- r + 1
    }
  }
  dt=data.table(df[,])
  dtw = dt[, .N, by=c(names(dt)[1:n])]
  dtw[, count := .N, by=c(names(dt)[1:n-1])][,prob:=1/count]
  return(dtw)
}

#dit is goed! LET OP SPATIES RONDOM PUNT, NOG BETER AFHANDELEN
str <- "gaan we.gaan we lopen.waar gaan we shoppen.waar gaan we heen.we shoppen ons gek."
zinnen = splitter(str)
driegram = create_ngram_table(3,zinnen)
driegram = driegram[!driegram$w1 == "",]
tweegram = create_ngram_table(2,zinnen)
tweegram = tweegram[!tweegram$w1 == "",]
singlegram =create_ngram_table(1,zinnen)
singlegram = singlegram[!singlegram$w1 == "",]
singlegram[, count2 := sum(N)][, prob2:=N/count2]

setkey(driegram,w2,w3)
setkey(tweegram,w1,w2)

driegram = driegram[tweegram, nomatch=0]

setkey(driegram,w3)
setkey(singlegram,w1)

driegram = driegram[singlegram, nomatch=0]



#system.time(dt)
dt=data.table(tweengram[,])
dtw3 = dt[, .N, by=c(names(dt)[1:3])]
dtw3[, count := .N, by='w1,w2'][,prob:=N/count]

